# üìÅ discord_bot_multiserver
# Bot Discord AI (ML nh·∫π) h·ªó tr·ª£ m·ªói server m·ªôt model ri√™ng, t·ª± t·∫°o file d·ªØ li·ªáu khi th√™m server m·ªõi

import discord
import os
import pickle
import json
from datetime import datetime
from sklearn.feature_extraction.text import CountVectorizer
from sklearn.linear_model import LogisticRegression

import os
TOKEN = os.getenv("DISCORD_TOKEN")
intents = discord.Intents.default()
intents.message_content = True
intents.guilds = True
intents.dm_messages = True  # B·∫Øt tin nh·∫Øn DM
client = discord.Client(intents=intents)

# ======= M·∫´u intents m·∫∑c ƒë·ªãnh =======
def create_default_intents(path):
    default_data = {
        "intents": [
            {
                "tag": "greeting",
                "patterns": ["hi", "hello", "xin ch√†o"],
                "responses": ["Ch√†o b·∫°n!", "Hello!"]
            },
            {
                "tag": "goodbye",
                "patterns": ["bye", "t·∫°m bi·ªát"],
                "responses": ["T·∫°m bi·ªát nh√©!", "H·∫πn g·∫∑p l·∫°i!"]
            }
        ]
    }
    os.makedirs(path, exist_ok=True)
    with open(f"{path}/intents.json", "w", encoding="utf-8") as f:
        json.dump(default_data, f, ensure_ascii=False, indent=2)

# ======= Ghi log c√¢u h·ªèi ch∆∞a hi·ªÉu v√†o pending_data.json =======
def save_pending_question(server_id, question, user):
    path = f"data/{server_id}/pending_data.json"
    os.makedirs(f"data/{server_id}", exist_ok=True)
    try:
        if os.path.exists(path):
            with open(path, "r", encoding="utf-8") as f:
                pending = json.load(f)
        else:
            pending = []
        if any(p["text"].strip().lower() == question.strip().lower() for p in pending):
            print("‚ö†Ô∏è ƒê√£ t·ªìn t·∫°i c√¢u h·ªèi t∆∞∆°ng t·ª±, kh√¥ng l∆∞u l·∫°i.")
            return
        pending.append({
            "text": question,
            "from": str(user),
            "tag": None,
            "timestamp": datetime.utcnow().isoformat()
        })
        with open(path, "w", encoding="utf-8") as f:
            json.dump(pending, f, ensure_ascii=False, indent=2)
    except Exception as e:
        print("‚ùå L·ªói khi l∆∞u pending_data:", e)

# ======= Xem danh s√°ch c√¢u h·ªèi ch·ªù x·ª≠ l√Ω =======
def get_pending_questions(server_id):
    path = f"data/{server_id}/pending_data.json"
    if not os.path.exists(path):
        return []
    with open(path, encoding="utf-8") as f:
        return json.load(f)

# ======= Load m√¥ h√¨nh theo server =======
def load_model(server_id):
    path = f"data/{server_id}"
    try:
        with open(f"{path}/model.pkl", "rb") as f:
            model = pickle.load(f)
        with open(f"{path}/vectorizer.pkl", "rb") as f:
            vectorizer = pickle.load(f)
        with open(f"{path}/intents.json", encoding="utf-8") as f:
            intents = json.load(f)
        return model, vectorizer, intents
    except:
        return None, None, None

# ======= X·ª≠ l√Ω response =======
def get_response(msg, model, vectorizer, intents, threshold=0.7):
    if not model or not vectorizer:
        return None
    vec = vectorizer.transform([msg.lower()])
    probs = model.predict_proba(vec)[0]
    confidence = max(probs)
    if confidence < threshold:
        return None
    tag = model.predict(vec)[0]
    for intent in intents["intents"]:
        if intent["tag"] == tag:
            return intent["responses"][0]
    return None

# ======= L·ªánh TRAIN ƒë∆°n gi·∫£n =======
def train_model(server_id):
    path = f"data/{server_id}"
    os.makedirs(path, exist_ok=True)
    try:
        with open(f"{path}/intents.json", encoding="utf-8") as f:
            data = json.load(f)

        X, y = [], []
        for intent in data["intents"]:
            for pattern in intent["patterns"]:
                X.append(pattern.lower())
                y.append(intent["tag"])

        vectorizer = CountVectorizer()
        X_vec = vectorizer.fit_transform(X)

        model = LogisticRegression()
        model.fit(X_vec, y)

        with open(f"{path}/model.pkl", "wb") as f:
            pickle.dump(model, f)
        with open(f"{path}/vectorizer.pkl", "wb") as f:
            pickle.dump(vectorizer, f)
        return True
    except Exception as e:
        print("Train Error:", e)
        return False

# ======= S·ª± ki·ªán: Bot ƒë∆∞·ª£c th√™m v√†o server m·ªõi =======
@client.event
async def on_guild_join(guild):
    server_id = str(guild.id)
    path = f"data/{server_id}"
    if not os.path.exists(f"{path}/intents.json"):
        create_default_intents(path)
        print(f"üìÅ T·∫°o d·ªØ li·ªáu m·∫∑c ƒë·ªãnh cho server {server_id}")

# ======= S·ª± ki·ªán ch√≠nh =======
@client.event
async def on_ready():
    print(f"ü§ñ Bot ƒë√£ s·∫µn s√†ng: {client.user}")

@client.event
async def on_message(message):
    if message.author == client.user:
        return

    if message.guild is None:
        await message.channel.send("‚ùå Bot hi·ªán ch∆∞a h·ªó tr·ª£ tin nh·∫Øn tr·ª±c ti·∫øp (DM). Vui l√≤ng d√πng trong server.")
        return

    server_id = str(message.guild.id)

    if message.content.startswith("/train") or message.content.startswith("/refresh"):
        ok = train_model(server_id)
        if ok:
            await message.channel.send("‚úÖ ƒê√£ hu·∫•n luy·ªán l·∫°i m√¥ h√¨nh cho server n√†y!")
        else:
            await message.channel.send("‚ùå L·ªói khi hu·∫•n luy·ªán. Ki·ªÉm tra file intents.json")
        return

    if message.content.startswith("/pending"):
        pending = get_pending_questions(server_id)
        if not pending:
            await message.channel.send("‚úÖ Kh√¥ng c√≥ c√¢u h·ªèi n√†o ch·ªù x·ª≠ l√Ω!")
        else:
            msg = "üìã **Danh s√°ch c√¢u h·ªèi ch∆∞a x·ª≠ l√Ω:**\n"
            for idx, item in enumerate(pending, start=1):
                msg += f"{idx}. `{item['text']}` - t·ª´ {item['from']} ({item.get('timestamp', 'N/A')})\n"
            await message.channel.send(msg)
        return
    if message.content.startswith("/delete"):
        try:
            parts = message.content.split(" ")
            index = int(parts[1]) - 1
            path = f"data/{server_id}/pending_data.json"
            with open(path, "r", encoding="utf-8") as f:
                pending = json.load(f)

            if index < 0 or index >= len(pending):
                await message.channel.send("‚ùå S·ªë th·ª© t·ª± kh√¥ng h·ª£p l·ªá.")
                return

            deleted_question = pending.pop(index)
            with open(path, "w", encoding="utf-8") as f:
                json.dump(pending, f, ensure_ascii=False, indent=2)

            await message.channel.send(f"üóëÔ∏è ƒê√£ xo√° c√¢u h·ªèi: `{deleted_question['text']}`")
        except Exception as e:
            await message.channel.send(f"‚ùå L·ªói khi xo√°: {e}")
        return

    if message.content.startswith("/reply"):
        try:
            parts = message.content.split(" ", 3)
            index = int(parts[1]) - 1
            tag = parts[2]
            new_response = parts[3]

            # Load d·ªØ li·ªáu hi·ªán t·∫°i
            pending = get_pending_questions(server_id)
            intents_path = f"data/{server_id}/intents.json"
            with open(intents_path, "r", encoding="utf-8") as f:
                intents_data = json.load(f)

            # Th√™m response m·ªõi v√†o intent t∆∞∆°ng ·ª©ng ho·∫∑c t·∫°o intent m·ªõi
            found = False
            for intent in intents_data["intents"]:
                if intent["tag"] == tag:
                    intent["patterns"].append(pending[index]["text"])
                    if new_response not in intent["responses"]:
                        intent["responses"].append(new_response)
                    found = True
                    break

            if not found:
                intents_data["intents"].append({
                    "tag": tag,
                    "patterns": [pending[index]["text"]],
                    "responses": [new_response]
                })

            # Ghi l·∫°i intents m·ªõi
            with open(intents_path, "w", encoding="utf-8") as f:
                json.dump(intents_data, f, ensure_ascii=False, indent=2)

            # X√≥a c√¢u h·ªèi ƒë√£ x·ª≠ l√Ω
            del pending[index]
            with open(f"data/{server_id}/pending_data.json", "w", encoding="utf-8") as f:
                json.dump(pending, f, ensure_ascii=False, indent=2)

            await message.channel.send(f"‚úÖ ƒê√£ th√™m v√†o intent `{tag}` v√† x√≥a kh·ªèi pending.")
        except Exception as e:
            await message.channel.send(f"‚ùå L·ªói x·ª≠ l√Ω reply: {str(e)}")
        return
    
    model, vectorizer, intents_data = load_model(server_id)
    clean_msg = message.content.strip().lower()
    response = get_response(clean_msg, model, vectorizer, intents_data)
    if response:
        await message.channel.send(response)
    else:
        await message.channel.send("‚ùì M√¨nh ch∆∞a hi·ªÉu √Ω b·∫°n. M√¨nh ƒë√£ l∆∞u l·∫°i ƒë·ªÉ admin duy·ªát sau.")
        save_pending_question(server_id, clean_msg, message.author)


client.run(TOKEN)
